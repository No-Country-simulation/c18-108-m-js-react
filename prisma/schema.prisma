// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String  @id @default(cuid())
    clerkId   String? @unique
    firstName String?
    lastName  String?
    email     String? @unique
    imageUrl  String?
    status    Boolean @default(true)
    role      Role    @default(ADMIN)
    schoolId  String?
    school    School? @relation(fields: [schoolId], references: [id])

    posts          Post[]
    teacherCourses Course[] @relation("TeacherCourses")
    studentCourses Course[] @relation("StudentCourses")
    createdAt      DateTime @default(now()) @map(name: "created_at")
    updatedAt      DateTime @default(now()) @map(name: "updated_at")
}

enum Role {
    ADMIN
    TEACHER
    STUDENT
    PARENT
}

model Post {
    id        String   @id @default(cuid())
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([title])
}

model School {
    id      String @id @default(cuid())
    name    String
    address String

    users User[]
}

model Course {
    id       String  @id @default(cuid())
    name     String
    imageUrl String?

    teacherId String?
    teacher   User?   @relation(name: "TeacherCourses", fields: [teacherId], references: [id])

    students User[] @relation(name: "StudentCourses")

    gradeId String?
    grade   Grade?  @relation(fields: [gradeId], references: [id])

    activities Activity[]
}

model Grade {
    id    String @id @default(cuid())
    name  String
    level Level  @default(PRIMARY)

    courses Course[]
}

enum Level {
    PRIMARY
    SECONDARY
}

model Activity {
    id          String   @id @default(cuid())
    description String
    date        DateTime
    score       Float

    courseId String
    course   Course @relation(fields: [courseId], references: [id])
}
